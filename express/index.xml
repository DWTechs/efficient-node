<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>What is Express on Efficient-node</title><link>https://dwtechs.github.io/efficient-node/express/</link><description>Recent content in What is Express on Efficient-node</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://dwtechs.github.io/efficient-node/express/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://dwtechs.github.io/efficient-node/express/controllers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-node/express/controllers/</guid><description>A controller is responsible for controlling the way that a user interacts with an MVC application. It contains the flow control logic and determines what response to send back to a user when a user makes a request.
As seen in the previous chapter, for every route you define a route-handler callback function (ie: a middleware) that will contain the code to compute a proper response. In MVC pattern ths is exactly what a controller should do.</description></item><item><title/><link>https://dwtechs.github.io/efficient-node/express/error-handling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-node/express/error-handling/</guid><description>Express out of the box comes with a built in error handler that will automatically catch all synchronous / asynchronous errors that occur inside route handlers and middleware.
The exception being errors occurring inside asynchronous functions invoked by our route handlers / middleware they must be passed to the next() function for Express to catch and handle them.
For example:
// example 1 - error handled automatically app.get(&amp;#39;/&amp;#39;, (req, res) =&amp;gt; { throw new Error(&amp;#39;Some Error&amp;#39;); }) // example 2 using next to catch the error from the asynchronous operation and pass it onto Express app.</description></item><item><title/><link>https://dwtechs.github.io/efficient-node/express/middlewares/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-node/express/middlewares/</guid><description>Middleware functions are functions that have access to the request object (req), the response object (res), and the next middleware function in the application’s request-response cycle. The next middleware function is commonly denoted by a variable named next. The use of middlewares is a very important principle for Express.js.
Using middleware Middleware functions can perform the following tasks:
Execute any code. Make changes to the request and the response objects. End the request-response cycle.</description></item><item><title/><link>https://dwtechs.github.io/efficient-node/express/routes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-node/express/routes/</guid><description>Routing refers to how an application’s endpoints (URIs) respond to client requests.
You define routing using methods of the Express app object that correspond to HTTP methods; for example, app.get() to handle GET requests and app.post() to handle POST requests. You can also use app.use() to specify middleware as the callback function.
These routing methods specify a callback function called when the application receives a request to the specified route and HTTP method.</description></item><item><title/><link>https://dwtechs.github.io/efficient-node/express/services/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://dwtechs.github.io/efficient-node/express/services/</guid><description>In an MVC pattern the service is part of the model. It mainly manages the data of the application. Services live inside the models/ folder.
For example it will handle the call to the database and return it to the controller.
For example it will handle the call to the database and return the result(s) back to the controller.
Route file example outline:
const express = require(&amp;#39;express&amp;#39;); const router = express.</description></item></channel></rss>